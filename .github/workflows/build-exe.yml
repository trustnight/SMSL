name: Build EXE

# 触发条件
on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

# 权限配置
permissions:
  contents: write  # 允许创建 Release 和上传文件
  actions: read    # 允许读取 Actions

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 读取版本号并设置环境变量
      id: version
      run: |
        # 从constants.py文件中读取版本号
        $content = Get-Content "src\common\constants.py" -Raw
        if ($content -match 'APP_VERSION\s*=\s*"([^"]+)"') {
            $version = $matches[1]
            Write-Host "检测到版本号: $version"
            
            # 转换为小写的标签格式（去掉V前缀如果存在）
            $tag = $version.ToLower()
            if ($tag.StartsWith('v')) {
                $tag = $tag
            } else {
                $tag = "v$tag"
            }
            
            Write-Host "将创建标签: $tag"
            
            # 设置环境变量供后续步骤使用
            echo "VERSION_TAG=$tag" >> $env:GITHUB_ENV
            echo "APP_VERSION=$version" >> $env:GITHUB_ENV
            
            # 设置输出变量
            echo "version-tag=$tag" >> $env:GITHUB_OUTPUT
            echo "app-version=$version" >> $env:GITHUB_OUTPUT
        } else {
            Write-Error "无法从 src/common/constants.py 中找到 APP_VERSION"
            exit 1
        }
        
    - name: 创建Git标签
      run: |
        # 配置git用户信息
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # 删除已存在的标签（如果存在）
        git tag -d ${{ env.VERSION_TAG }} 2>$null || Write-Host "标签 ${{ env.VERSION_TAG }} 不存在，无需删除"
        git push origin :refs/tags/${{ env.VERSION_TAG }} 2>$null || Write-Host "远程标签 ${{ env.VERSION_TAG }} 不存在，无需删除"
        
        # 创建新标签
        git tag -a ${{ env.VERSION_TAG }} -m "Release ${{ env.APP_VERSION }} - Auto-generated from APP_VERSION"
        git push origin ${{ env.VERSION_TAG }}
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: 构建EXE文件
      run: |
        # 使用已有的spec文件构建
        pyinstaller soul_launcher.spec
        
        # 验证构建结果
        if (Test-Path "dist\SoulMask Server Launcher.exe") {
            Write-Host "✅ EXE 文件构建成功: dist\SoulMask Server Launcher.exe"
            Get-Item "dist\SoulMask Server Launcher.exe" | Select-Object Name, Length, LastWriteTime
        } else {
            Write-Error "❌ EXE 文件构建失败，找不到输出文件"
            Write-Host "当前 dist 目录内容:"
            if (Test-Path "dist") { Get-ChildItem dist -Recurse } else { Write-Host "dist 目录不存在" }
            exit 1
        }
        
    - name: 创建发布包
      run: |
        # 创建发布目录
        New-Item -ItemType Directory -Path release -Force
        
        # 复制exe文件
        if (Test-Path "dist\SoulMask Server Launcher.exe") {
            Copy-Item "dist\SoulMask Server Launcher.exe" release\
        } else {
            Write-Error "找不到构建的 EXE 文件: dist\SoulMask Server Launcher.exe"
            exit 1
        }
        
        # 复制必要的配置文件和目录
        if (Test-Path configs) {
            New-Item -ItemType Directory -Path release\configs -Force
            Copy-Item configs\* release\configs\ -Recurse
        }
        
        # 复制样式文件
        if (Test-Path "src\common\styles.css") {
            New-Item -ItemType Directory -Path release\src\common -Force
            Copy-Item src\common\styles.css release\src\common\
        } else {
            Write-Warning "样式文件不存在: src\common\styles.css，跳过复制"
        }
        
        # 创建README
        @"
        SoulMask Server Launcher - 游戏服务器管理工具

        使用说明：
        1. 运行 SoulMask Server Launcher.exe
        2. 在路径设置中配置服务器路径
        3. 配置服务器参数后即可启动服务器
        "@ | Out-File -FilePath release\README.txt -Encoding UTF8
        
    - name: 压缩发布包
      run: |
        # 使用PowerShell压缩文件
        Compress-Archive -Path release\* -DestinationPath "SoulMask-Server-Launcher-${{ steps.version.outputs.app-version }}.zip"
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: soul-launcher-exe
        path: |
          SoulMask-Server-Launcher-*.zip
          dist/SoulMask Server Launcher.exe
        retention-days: 30
        
    # 创建GitHub Release（使用从constants.py读取的版本号）
    - name: 创建Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version-tag }}
        name: SoulMask Server Launcher ${{ steps.version.outputs.app-version }}
        files: |
          SoulMask-Server-Launcher-*.zip
          dist/SoulMask Server Launcher.exe
        body: |
          ## SoulMask Server Launcher ${{ steps.version.outputs.app-version }}
          
          ### 新功能
          - 自动构建的EXE版本
          - 包含完整的配置文件和样式
          - 版本号自动从代码中读取
          
          ### 使用方法
          1. 下载 `SoulMask-Server-Launcher-${{ steps.version.outputs.app-version }}.zip` 并解压
          2. 运行 `SoulMask Server Launcher.exe`
          3. 按照README.txt中的说明进行配置
          
          ### 系统要求
          - Windows 10/11
          - .NET Framework 4.7.2 或更高版本
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  # 可选：构建多平台版本
  build-cross-platform:
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            executable: SoulMask Server Launcher.exe
            artifact_name: soul-launcher-windows
          - os: ubuntu-latest
            executable: soul_launcher
            artifact_name: soul-launcher-linux
          - os: macos-latest
            executable: soul_launcher
            artifact_name: soul-launcher-macos
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: 构建可执行文件
      run: |
        pyinstaller soul_launcher.spec
        
    - name: 上传跨平台构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.executable }}
        retention-days: 30